// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(uuid()) @db.Uuid
  name           String
  email          String             @unique
  password       String
  workspaceUsers WorkspaceUsers[]
}

model Workspace {
  workspaceId         String           @id @default(uuid()) @db.Uuid
  name                String
  description         String?
  visibilityPrivate   Boolean       @default(true)
  visibilityPublic    Boolean       @default(false)
  canEditAdmin        Boolean       @default(false)
  canEditUser         Boolean       @default(true)
  boards              Board[]
  workspacesUser      WorkspaceUsers[]
}

model WorkspaceUsers {
  workspaceUsersId    String        @id @default(uuid()) @db.Uuid
  userId              String        @db.Uuid
  workspaceId         String        @db.Uuid
  is_admin            Boolean       @default(true)
  user                User          @relation(fields: [userId], references: [id])
  workspace           Workspace     @relation(fields: [workspaceId], references: [workspaceId])

  @@unique([userId, workspaceId])
}

model Board {
  boardId             String        @id @default(uuid()) @db.Uuid
  title               String
  description         String?
  coverColor          String?
  coverImage          String?
  workspaceId         String        @db.Uuid
  workspace           Workspace     @relation(fields: [workspaceId], references: [workspaceId], onDelete: Cascade)
  lists               List[]

  @@index([workspaceId])
}

model List {
  listId              String        @id @default(uuid()) @db.Uuid
  name                String
  position            Int           
  boardId             String        @db.Uuid
  board               Board         @relation(fields: [boardId], references: [boardId], onDelete: Cascade)
  cards               Card[]

  @@index([boardId])
}

model Card {
  cardId              String        @id @default(uuid()) @db.Uuid
  title               String
  description         Json?
  coverColor          String?
  coverImage          String?
  startDate           DateTime?      @db.Date
  dueDate             DateTime?
  listId              String        @db.Uuid
  list                List           @relation(fields: [listId], references: [listId], onDelete: Cascade)

  @@index([listId])
}